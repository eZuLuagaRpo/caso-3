{"name": "Prueba paramétrica para /getReturns con diferentes entradas", "status": "failed", "statusDetails": {"message": "AssertionError: assert 200 == 404\n +  where 200 = <JsonResponse status_code=200, \"application/json\">.status_code", "trace": "self = <financialSearch.tests.TestGetReturnsParametric object at 0x0000025F697CE850>\nlogged_in_client = <django.test.client.Client object at 0x0000025F6AF01EF0>, mock_yfinance = None, from_date = '2025-01-01', to_date = '2025-01-05'\nbrand = 'AAPL', expected_status = 404, expected_error = 'No se encontraron datos para el ticker y rango de fechas dados.'\n\n    @allure.story(\"Casos Varios de Obtención de Datos\")\n    @allure.title(\"Prueba paramétrica para /getReturns con diferentes entradas\")\n    @allure.description(\"Evalúa el comportamiento de /getReturns con múltiples combinaciones de entradas, incluyendo casos válidos, fechas invertidas, tickers inválidos, formatos incorrectos y campos faltantes.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize(\n        \"from_date,to_date,brand,expected_status,expected_error\",\n        [\n            # Caso de éxito: Fechas válidas y ticker válido\n            ('2023-01-01', '2023-01-05', 'AAPL', 200, None),\n            # Fechas invertidas: from > to\n            ('2023-01-05', '2023-01-01', 'AAPL', 404, 'No se encontraron datos para el ticker y rango de fechas dados.'),\n            # Ticker inválido\n            ('2023-01-01', '2023-01-05', 'INVALID', 404, 'No se encontraron datos para el ticker y rango de fechas dados.'),\n            # Fecha inválida: Formato incorrecto\n            ('invalid-date', '2023-01-05', 'AAPL', 400, 'Formato de fecha inválido.'),\n            # Campos faltantes: Falta 'to'\n            ('2023-01-01', '', 'AAPL', 400, 'Faltan campos requeridos.'),\n            # Campos faltantes: Falta 'from'\n            ('', '2023-01-05', 'AAPL', 400, 'Faltan campos requeridos.'),\n            # Fechas iguales: Comprobar comportamiento con rango de un solo día\n            ('2023-01-01', '2023-01-01', 'AAPL', 200, None),\n            # Fechas en el futuro: No deberían devolver datos\n            ('2025-01-01', '2025-01-05', 'AAPL', 404, 'No se encontraron datos para el ticker y rango de fechas dados.')\n        ]\n    )\n    @pytest.mark.django_db\n    def test_get_returns_parametric(self, logged_in_client, mock_yfinance, from_date, to_date, brand, expected_status, expected_error):\n        data = {'from': from_date, 'to': to_date, 'brand': brand}\n        response = logged_in_client.post('/getReturns', data)\n>       assert response.status_code == expected_status\nE       assert 200 == 404\nE        +  where 200 = <JsonResponse status_code=200, \"application/json\">.status_code\n\nfinancialSearch\\tests.py:270: AssertionError"}, "description": "Evalúa el comportamiento de /getReturns con múltiples combinaciones de entradas, incluyendo casos válidos, fechas invertidas, tickers inválidos, formatos incorrectos y campos faltantes.", "parameters": [{"name": "from_date", "value": "'2025-01-01'"}, {"name": "to_date", "value": "'2025-01-05'"}, {"name": "brand", "value": "'AAPL'"}, {"name": "expected_status", "value": "404"}, {"name": "expected_error", "value": "'No se encontraron datos para el ticker y rango de fechas dados.'"}], "start": 1747101496154, "stop": 1747101496157, "uuid": "48a5220f-1a80-4413-9fa9-8b6f6d3a288b", "historyId": "78169f88f320f944dae647e7ee164ba3", "testCaseId": "32d5fb6ac01426c90cd3f74050119a60", "fullName": "financialSearch.tests.TestGetReturnsParametric#test_get_returns_parametric", "labels": [{"name": "story", "value": "Casos Varios de Obtención de Datos"}, {"name": "feature", "value": "Obtención de Datos Financieros"}, {"name": "severity", "value": "normal"}, {"name": "tag", "value": "django_db"}, {"name": "parentSuite", "value": "financialSearch"}, {"name": "suite", "value": "tests"}, {"name": "subSuite", "value": "TestGetReturnsParametric"}, {"name": "host", "value": "emanuelZuluaga"}, {"name": "thread", "value": "20020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "financialSearch.tests"}]}