{"name": "POST /getReturns con datos válidos devuelve 200 y datos correctos", "status": "failed", "statusDetails": {"message": "AssertionError: assert ('analysis' in {'analysis': 'No hay suficientes datos para realizar un análisis fiable. Se requieren al menos 20 días de datos.', 'br..._5': None}, {'close': 103, 'date': '2023-01-04', 'sma_5': None}, {'close': 104, 'date': '2023-01-05', 'sma_5': 102.0}]} and 'No hay sufic...ías de datos.' == 'Implemente su análisis acá.'\n  \n  - Implemente su análisis acá.\n  + No hay suficientes datos para realizar un análisis fiable. Se requieren al menos 20 días de datos.)", "trace": "self = <financialSearch.tests.TestGetReturns object at 0x0000025F698847D0>, logged_in_client = <django.test.client.Client object at 0x0000025F6990BCB0>\nmock_yfinance = None\n\n    @allure.story(\"Obtener Datos con POST\")\n    @allure.title(\"POST /getReturns con datos válidos devuelve 200 y datos correctos\")\n    @allure.description(\"Prueba que una solicitud POST a /getReturns con fechas y ticker válidos devuelva un código 200 y un JSON con la marca, datos financieros y análisis esperados.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.django_db\n    def test_get_returns_post_success(self, logged_in_client, mock_yfinance):\n        data = {'from': '2023-01-01', 'to': '2023-01-05', 'brand': 'AAPL'}\n        response = logged_in_client.post('/getReturns', data)\n        assert response.status_code == 200\n        json_data = response.json()\n        assert 'brand' in json_data and json_data['brand'] == 'AAPL'\n        assert 'data' in json_data and len(json_data['data']) > 0\n>       assert 'analysis' in json_data and json_data['analysis'] == \"Implemente su análisis acá.\"\nE       AssertionError: assert ('analysis' in {'analysis': 'No hay suficientes datos para realizar un análisis fiable. Se requieren al menos 20 días de datos.', 'br..._5': None}, {'close': 103, 'date': '2023-01-04', 'sma_5': None}, {'close': 104, 'date': '2023-01-05', 'sma_5': 102.0}]} and 'No hay sufic...ías de datos.' == 'Implemente su análisis acá.'\nE         \nE         - Implemente su análisis acá.\nE         + No hay suficientes datos para realizar un análisis fiable. Se requieren al menos 20 días de datos.)\n\nfinancialSearch\\tests.py:176: AssertionError"}, "description": "Prueba que una solicitud POST a /getReturns con fechas y ticker válidos devuelva un código 200 y un JSON con la marca, datos financieros y análisis esperados.", "start": 1747101486641, "stop": 1747101486645, "uuid": "011061a5-e0d7-4a4f-9f09-31cb6868f03b", "historyId": "c03ff2751e9f97366aad554098e328b9", "testCaseId": "c03ff2751e9f97366aad554098e328b9", "fullName": "financialSearch.tests.TestGetReturns#test_get_returns_post_success", "labels": [{"name": "story", "value": "Obtener Datos con POST"}, {"name": "feature", "value": "Obtención de Datos Financieros"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "django_db"}, {"name": "parentSuite", "value": "financialSearch"}, {"name": "suite", "value": "tests"}, {"name": "subSuite", "value": "TestGetReturns"}, {"name": "host", "value": "emanuelZuluaga"}, {"name": "thread", "value": "20020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "financialSearch.tests"}]}